# uncompyle6 version 3.6.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.7.6 (default, Jan  8 2020, 13:42:34) 
# [Clang 4.0.1 (tags/RELEASE_401/final)]
# Embedded file name: /Users/riedl/Desktop/cs 4731/projects/instructor-astar-solution/astarnavigator2.py
# Size of source mod 2**32: 17568 bytes
__doc__ = ''
import sys, pygame, math, numpy, random, time, copy
from pygame.locals import *
from constants import *
from utils import *
from core import *

def f33(OOO00OO00O00000OO, OO000O000OO0OO000):
    if OOO00OO00O00000OO[0] != OO000O000OO0OO000[0]:
        OO00OO00OO00OOOO0 = (OOO00OO00O00000OO[1] - OO000O000OO0OO000[1]) / float(OOO00OO00O00000OO[0] - OO000O000OO0OO000[0])
        return OO00OO00OO00OOOO0
    return


def f32(OO00OO00O00OOO00O, O00000OO00OOOO0OO):
    return OO00OO00O00OOO00O[1] - O00000OO00OOOO0OO * OO00OO00O00OOO00O[0]


def f31(O00O0OOOOOOOO0O0O, O00OO00OO0OO0OO00, O0O000OOO0OO0OOO0, O0OO00O0O0O0O0OO0):
    OOOO0OOO00OOO0OO0 = f33(O00O0OOOOOOOO0O0O, O00OO00OO0OO0OO00)
    OOOO0000O00O0000O = f33(O0O000OOO0OO0OOO0, O0OO00O0O0O0O0OO0)
    if OOOO0OOO00OOO0OO0 != OOOO0000O00O0000O:
        if OOOO0OOO00OOO0OO0 is not None and OOOO0000O00O0000O is not None:
            OOOOOO0O00O00OOOO = f32(O00O0OOOOOOOO0O0O, OOOO0OOO00OOO0OO0)
            O0000OO0OOO0O0O0O = f32(O0O000OOO0OO0OOO0, OOOO0000O00O0000O)
            OO0O00OO0000OOO0O = (O0000OO0OOO0O0O0O - OOOOOO0O00O00OOOO) / float(OOOO0OOO00OOO0OO0 - OOOO0000O00O0000O)
            O000O00OOO0OO00O0 = OOOO0OOO00OOO0OO0 * OO0O00OO0000OOO0O + OOOOOO0O00O00OOOO
        else:
            if OOOO0OOO00OOO0OO0 is None:
                O0000OO0OOO0O0O0O = f32(O0O000OOO0OO0OOO0, OOOO0000O00O0000O)
                OO0O00OO0000OOO0O = O00O0OOOOOOOO0O0O[0]
                O000O00OOO0OO00O0 = OOOO0000O00O0000O * OO0O00OO0000OOO0O + O0000OO0OOO0O0O0O
            else:
                if OOOO0000O00O0000O is None:
                    OOOOOO0O00O00OOOO = f32(O00O0OOOOOOOO0O0O, OOOO0OOO00OOO0OO0)
                    OO0O00OO0000OOO0O = O0O000OOO0OO0OOO0[0]
                    O000O00OOO0OO00O0 = OOOO0OOO00OOO0OO0 * OO0O00OO0000OOO0O + OOOOOO0O00O00OOOO
                else:
                    assert false
        return (
         (
          OO0O00OO0000OOO0O, O000O00OOO0OO00O0),)
    OOOOOO0O00O00OOOO, O0000OO0OOO0O0O0O = (None, None)
    if OOOO0OOO00OOO0OO0 is not None:
        OOOOOO0O00O00OOOO = f32(O00O0OOOOOOOO0O0O, OOOO0OOO00OOO0OO0)
    if OOOO0000O00O0000O is not None:
        O0000OO0OOO0O0O0O = f32(O0O000OOO0OO0OOO0, OOOO0000O00O0000O)
    if OOOOOO0O00O00OOOO == O0000OO0OOO0O0O0O:
        return (O00O0OOOOOOOO0O0O, O00OO00OO0OO0OO00, O0O000OOO0OO0OOO0, O0OO00O0O0O0O0OO0)
    return


def f30(O0OO00O00OO0OOOOO, O000OO0OOO0O00OO0, OO00O0OOO0O000000):
    return O0OO00O00OO0OOOOO + EPSILON >= min(O000OO0OOO0O00OO0, OO00O0OOO0O000000) and O0OO00O00OO0OOOOO - EPSILON <= max(O000OO0OOO0O00OO0, OO00O0OOO0O000000)


def f29(O00OOOOOO0O00O00O, OOOOOOOOO0OOO0000, O0OOOO0O00O000O0O, OOO000O00O00O0OOO):
    OO0OOO0O00OOO0000 = f31(O00OOOOOO0O00O00O, OOOOOOOOO0OOO0000, O0OOOO0O00O000O0O, OOO000O00O00O0OOO)
    if OO0OOO0O00OOO0000 is not None:
        OO0OOO0O00OOO0000 = OO0OOO0O00OOO0000[0]
        if f30(OO0OOO0O00OOO0000[0], O00OOOOOO0O00O00O[0], OOOOOOOOO0OOO0000[0]):
            if f30(OO0OOO0O00OOO0000[1], O00OOOOOO0O00O00O[1], OOOOOOOOO0OOO0000[1]):
                if f30(OO0OOO0O00OOO0000[0], O0OOOO0O00O000O0O[0], OOO000O00O00O0OOO[0]):
                    if f30(OO0OOO0O00OOO0000[1], O0OOOO0O00O000O0O[1], OOO000O00O00O0OOO[1]):
                        return OO0OOO0O00OOO0000


def f15(OOO0000O00O0OO0O0, O00000O0OO0000000):
    return ((O00000O0OO0000000[0] - OOO0000O00O0OO0O0[0]) ** 2 + (O00000O0OO0000000[1] - OOO0000O00O0OO0O0[1]) ** 2) ** 0.5


def f28(O000000O0OOOO000O, O0OO000OO00O0O0OO, O00O0O0OOO0O0O0O0):
    return f29(O00O0O0OOO0O0O0O0[0], O00O0O0OOO0O0O0O0[1], O000000O0OOOO000O, O0OO000OO00O0O0OO)


def f13(OOOOO0000OO00OO0O, OO00O0O0O0OOO0OOO, OOOOOO00O0O0OO0O0):
    for O0O00O0OOO0OOO0OO in OOOOOO00O0O0OO0O0:
        OO0OOO00OOOO0OO00 = f28(OOOOO0000OO00OO0O, OO00O0O0O0OOO0OOO, O0O00O0OOO0OOO0OO)
        if OO0OOO00OOOO0OO00 != None:
            return OO0OOO00OOOO0OO00


def f12(O00OOO0O00000O00O, O0OOO0OOOO0OOO0O0):
    OOO0000O000OOO000 = f15(O00OOO0O00000O00O[1], O00OOO0O00000O00O[0]) ** 2.0
    if OOO0000O000OOO000 == 0.0:
        return f15(O0OOO0OOOO0OOO0O0, O00OOO0O00000O00O[0])
    O0OOO0OO0OO00OO00 = (
     O0OOO0OOOO0OOO0O0[0] - O00OOO0O00000O00O[0][0], O0OOO0OOOO0OOO0O0[1] - O00OOO0O00000O00O[0][1])
    OO00O00O00OO0O0O0 = (O00OOO0O00000O00O[1][0] - O00OOO0O00000O00O[0][0], O00OOO0O00000O00O[1][1] - O00OOO0O00000O00O[0][1])
    OO00OOOO00O0OO000 = dotProduct(O0OOO0OO0OO00OO00, OO00O00O00OO0O0O0) / OOO0000O000OOO000
    if OO00OOOO00O0OO000 < 0.0:
        return f15(O0OOO0OOOO0OOO0O0, O00OOO0O00000O00O[0])
    if OO00OOOO00O0OO000 > 1.0:
        return f15(O0OOO0OOOO0OOO0O0, O00OOO0O00000O00O[1])
    OOOO0O0O0O000OO00 = (
     O00OOO0O00000O00O[0][0] + OO00OOOO00O0OO000 * (O00OOO0O00000O00O[1][0] - O00OOO0O00000O00O[0][0]), O00OOO0O00000O00O[0][1] + OO00OOOO00O0OO000 * (O00OOO0O00000O00O[1][1] - O00OOO0O00000O00O[0][1]))
    return f15(O0OOO0OOOO0OOO0O0, OOOO0O0O0O000OO00)


def f20(O00OOOOO0OOO0OO0O, O0O0OO0O0O000O0O0, O000OO0O0OO0O00O0):
    OOO0O00O0OO0OOOOO = None
    OO0OO000000O0O0OO = INFINITY
    for OO0OOO0OOO0OOO00O in O0O0OO0O0O000O0O0:
        if f13(O00OOOOO0OOO0OO0O, OO0OOO0OOO0OOO00O, O000OO0O0OO0O00O0) == None:
            OO00O0000000O00O0 = f15(O00OOOOO0OOO0OO0O, OO0OOO0OOO0OOO00O)
            if OOO0O00O0OO0OOOOO == None or OO00O0000000O00O0 < OO0OO000000O0O0OO:
                OOO0O00O0OO0OOOOO = OO0OOO0OOO0OOO00O
                OO0OO000000O0O0OO = OO00O0000000O00O0

    return OOO0O00O0OO0OOOOO


class AStarNavigator2(PathNetworkNavigator):

    def computePath(OOOOO000O0OOOO0O0, O000OOOOO0O0O0OO0, O000OO000OO000O0O):
        OOOOO000O0OOOO0O0.setPath(None)
        if OOOOO000O0OOOO0O0.agent != None:
            if OOOOO000O0OOOO0O0.world != None:
                OOOOO000O0OOOO0O0.source = O000OOOOO0O0O0OO0
                OOOOO000O0OOOO0O0.destination = O000OO000OO000O0O
                if f22(O000OOOOO0O0O0OO0, O000OO000OO000O0O, OOOOO000O0OOOO0O0.world.getLinesWithoutBorders(), OOOOO000O0OOOO0O0.world.getPoints(), OOOOO000O0OOOO0O0.agent):
                    OOOOO000O0OOOO0O0.agent.moveToTarget(O000OO000OO000O0O)
                else:
                    O0O000000OOO0O00O = f21(O000OOOOO0O0O0OO0, OOOOO000O0OOOO0O0.pathnodes, OOOOO000O0OOOO0O0.world.getLinesWithoutBorders(), OOOOO000O0OOOO0O0.agent)
                OO000O0O00OO0O0O0 = f21(O000OO000OO000O0O, OOOOO000O0OOOO0O0.pathnodes, OOOOO000O0OOOO0O0.world.getLinesWithoutBorders(), OOOOO000O0OOOO0O0.agent)
                if O0O000000OOO0O00O != None and OO000O0O00OO0O0O0 != None:
                    O0OOO00OO0O00O000 = f23(OOOOO000O0OOOO0O0.pathnetwork, OOOOO000O0OOOO0O0.world.getGates(), OOOOO000O0OOOO0O0.world)
                    O00O0O00O00O0O0OO = []
                    OOOO00O00000OOO0O, O00O0O00O00O0O0OO = f17(O0O000000OOO0O00O, OO000O0O00OO0O0O0, O0OOO00OO0O00O000)
                    if OOOO00O00000OOO0O is not None and len(OOOO00O00000OOO0O) > 0:
                        OOOO00O00000OOO0O = f27(O000OOOOO0O0O0OO0, O000OO000OO000O0O, OOOO00O00000OOO0O, OOOOO000O0OOOO0O0.world, OOOOO000O0OOOO0O0.agent)
                        OOOOO000O0OOOO0O0.setPath(OOOO00O00000OOO0O)
                        if OOOOO000O0OOOO0O0.path is not None:
                            if len(OOOOO000O0OOOO0O0.path) > 0:
                                OO0000OO0000O0OOO = OOOOO000O0OOOO0O0.path.pop(0)
                                OOOOO000O0OOOO0O0.agent.moveToTarget(OO0000OO0000O0OOO)

    def checkpoint(O00000O0OO0OOOOOO):
        f26(O00000O0OO0OOOOOO)

    def smooth(O0O0O0O0OOO0O00O0):
        return f24(O0O0O0O0OOO0O00O0)

    def update(O0O0OO00O0OOO00OO, O0O0O0OO00O0000OO):
        f25(O0O0OO00O0OOO00OO, O0O0O0OO00O0000OO)


def f23(O00O00O00OO0OOO0O, O0O0O0OO0OO000O0O, OOO00O0OO00O0O0O0):
    OO00OO0O00OOOOO00 = []
    for OO0OO000OOO0OOO00 in O00O00O00OO0OOO0O:
        O0O000000O0000000 = f13(OO0OO000OOO0OOO00[0], OO0OO000OOO0OOO00[1], O0O0O0OO0OO000O0O)
        if O0O000000O0000000 == None:
            OO00OO0O00OOOOO00.append(OO0OO000OOO0OOO00)

    return OO00OO0O00OOOOO00


def f22(OO00O0OO00O0OOOOO, O00OO00OOO00OOOOO, O0O0O000OOOO0000O, OO0O0O00O0000OOO0, O0O000OOOO000000O):
    O000OOO0O0O0O0OOO = O0O000OOOO000000O.getMaxRadius()
    O0OOO0OO00OOOOO00 = f13(OO00O0OO00O0OOOOO, O00OO00OOO00OOOOO, O0O0O000OOOO0000O)
    if O0OOO0OO00OOOOO00 is None:
        O0000O0000OO00OOO = False
        for O0OOO0000O000O00O in OO0O0O00O0000OOO0:
            if f12((OO00O0OO00O0OOOOO, O00OO00OOO00OOOOO), O0OOO0000O000O00O) < O000OOO0O0O0O0OOO:
                O0000O0000OO00OOO = True

        if not O0000O0000OO00OOO:
            return True
    return False


def f21(O0OOOOOOOO0O00OOO, O00O0O0OOO0O0000O, OOOO0OOOOO00OOOO0, OO0OO00O00O00OOOO):
    OO000O00OOO0O0OO0 = None
    OO000O00OOO0O0OO0 = f20(O0OOOOOOOO0O00OOO, O00O0O0OOO0O0000O, OOOO0OOOOO00OOOO0)
    return OO000O00OOO0O0OO0


def f18(OO000O0O0O000O0O0, OO000OO00O0O00OO0, func=lambda O0O00OOOO00O00000: O0O00OOOO00O00000):
    for OOOOOO0O0O000O0O0 in range(len(OO000OO00O0O00OO0)):
        if func(OO000O0O0O000O0O0) < func(OO000OO00O0O00OO0[OOOOOO0O0O000O0O0]):
            OO000OO00O0O00OO0.insert(OOOOOO0O0O000O0O0, OO000O0O0O000O0O0)
            return OO000OO00O0O00OO0

    OO000OO00O0O00OO0.append(OO000O0O0O000O0O0)
    return OO000OO00O0O00OO0


def f17(O0O000OO0OOOOOOOO, OO0O000OO0O0O00OO, OOO00OO000O0O0O00):
    OOO00O0OOOO00O0O0 = []
    OOO0O00OOO00OOO00 = []
    O00OOO000O00OOO00 = []
    O0O000OO0OOOOOOOO = (O0O000OO0OOOOOOOO, 0, f15(O0O000OO0OOOOOOOO, OO0O000OO0O0O00OO), None)
    O00OOO000O00OOO00 = set()
    OOOOO0OOO0O0000O0 = set()
    OOO0O00OOO00OOO00 = [O0O000OO0OOOOOOOO]
    OO0OO000OOOOO000O = O0O000OO0OOOOOOOO
    while OO0OO000OOOOO000O is not None:
        if OO0OO000OOOOO000O[0] != OO0O000OO0O0O00OO and len(OOO0O00OOO00OOO00) > 0:
            O00OOO000O00OOO00.add(OO0OO000OOOOO000O[0])
            OOOOO0OOO0O0000O0.add(OO0OO000OOOOO000O)
            OOO0O00OOO00OOO00.pop(0)
            OO0O0O0OO0000OOOO = f16(OO0OO000OOOOO000O, OOO00OO000O0O0O00, OO0O000OO0O0O00OO)
            for OO00OO0000O00OO00 in OO0O0O0OO0000OOOO:
                if OO00OO0000O00OO00[0] not in O00OOO000O00OOO00:
                    f18(OO00OO0000O00OO00, OOO0O00OOO00OOO00, lambda O0OOO0000OOO0000O: O0OOO0000OOO0000O[1] + O0OOO0000OOO0000O[2])

            if len(OOO0O00OOO00OOO00) > 0:
                OO0OO000OOOOO000O = OOO0O00OOO00OOO00[0]
        else:
            OO0OO000OOOOO000O = None

    if OO0OO000OOOOO000O is not None:
        while OO0OO000OOOOO000O[3] is not None:
            OOO00O0OOOO00O0O0.append(OO0OO000OOOOO000O[0])
            O000OOOOOO0OO00OO = OO0OO000OOOOO000O[3]
            for O00O000OO00O0OOO0 in list(OOOOO0OOO0O0000O0):
                if O000OOOOOO0OO00OO == O00O000OO00O0OOO0[0]:
                    OO0OO000OOOOO000O = O00O000OO00O0OOO0
                    break

        OOO00O0OOOO00O0O0.append(OO0OO000OOOOO000O[0])
        OOO00O0OOOO00O0O0.reverse()
    O00OOO000O00OOO00 = list(O00OOO000O00OOO00)
    return (
     OOO00O0OOOO00O0O0, O00OOO000O00OOO00)


def f16(O000000O0OO0O0000, O0O0000O0OO0O00OO, OO0O0O0O0O0O0O0OO):
    O0OO0OOOOOO0000OO = []
    for OOOOO00OOOOOOOOO0 in O0O0000O0OO0O00OO:
        if OOOOO00OOOOOOOOO0[0] == O000000O0OO0O0000[0]:
            O0OO0OOOOOO0000OO.append((OOOOO00OOOOOOOOO0[1], O000000O0OO0O0000[1] + f15(OOOOO00OOOOOOOOO0[0], OOOOO00OOOOOOOOO0[1]), f15(OOOOO00OOOOOOOOO0[1], OO0O0O0O0O0O0O0OO), O000000O0OO0O0000[0]))

    return O0OO0OOOOOO0000OO


def f25(OOOOOOO0000O00OO0, OO00OOOO00O000O00):
    if OOOOOOO0000O00OO0.getPath() is not None:
        OOOOOO0O0OO0O00O0 = OOOOOOO0000O00OO0.world.getGates()
        O0000O0000000O000 = OOOOOOO0000O00OO0.agent.getLocation()
        for OO000O00O00000O00 in OOOOOOO0000O00OO0.getPath() + [OOOOOOO0000O00OO0.getDestination()]:
            if O0000O0000000O000 is not None:
                O000OOO0O00000OOO = f13(O0000O0000000O000, OO000O00O00000O00, OOOOOO0O0OO0O00O0)
                if O000OOO0O00000OOO is not None:
                    OOOOOOO0000O00OO0.setPath(None)
                    OOOOOOO0000O00OO0.agent.stopMoving()
                    return
            O0000O0000000O000 = OO000O00O00000O00

        return


def f26(O00O0O0OOOO000O00):
    pass


def f14(O000000OOO0O00O00):
    if O000000OOO0O00O00.path != None:
        if O000000OOO0O00O00.agent.moveTarget != O000000OOO0O00O00.destination:
            OO0O0000000O0O000 = f13(O000000OOO0O00O00.agent.rect.center, O000000OOO0O00O00.destination, O000000OOO0O00O00.world.getLines())
            if OO0O0000000O0O000 == None:
                OOOOOO0O0OO000O00 = False
                for O0OO00OO0O000OOOO in O000000OOO0O00O00.world.getPoints():
                    if f12((O000000OOO0O00O00.agent.rect.center, O000000OOO0O00O00.destination), O0OO00OO0O000OOOO) < O000000OOO0O00O00.agent.getRadius() * 2.0:
                        OOOOOO0O0OO000O00 = True

                if not OOOOOO0O0OO000O00:
                    return True
    return False


def f27(OO0000O0O0OOOOO0O, O00OO0O0O00O0OO00, OOOO000OO000OO00O, OO0OO000OOO0O0OOO, OOOO0O00OO0000OO0):
    OOOO000OO000OO00O = copy.deepcopy(OOOO000OO000OO00O)
    OO000O0OOO0000OOO = OO0OO000OOO0O0OOO.getLines()
    O0O0O000OOO0OOOOO = None
    OOO0O0OOOO0OOOO00 = None
    for O0OOO0O0O0000OO0O in OOOO000OO000OO00O:
        OO000O0O0O0000O0O = f13(OO0000O0O0OOOOO0O, O0OOO0O0O0000OO0O, OO000O0OOO0000OOO)
        if OO000O0O0O0000O0O == None:
            OOO0OOO0O00OOO0OO = False
            for OOO0OO00O000OO000 in OO0OO000OOO0O0OOO.getPoints():
                if f12((OO0000O0O0OOOOO0O, O0OOO0O0O0000OO0O), OOO0OO00O000OO000) < OO0OO000OOO0O0OOO.agent.getRadius() * 2.0:
                    OOO0OOO0O00OOO0OO = True

            if not OOO0OOO0O00OOO0OO:
                O0O0O000OOO0OOOOO = O0OOO0O0O0000OO0O
        if OOO0O0OOOO0OOOO00 == None:
            O0OOOOO00000O0O0O = f13(O0OOO0O0O0000OO0O, O00OO0O0O00O0OO00, OO000O0OOO0000OOO)
            if O0OOOOO00000O0O0O == None:
                OOO0OOO0O00OOO0OO = False
                for OOO0OO00O000OO000 in OO0OO000OOO0O0OOO.getPoints():
                    if f12((O00OO0O0O00O0OO00, O0OOO0O0O0000OO0O), OOO0OO00O000OO000) < OO0OO000OOO0O0OOO.agent.getRadius() * 2.0:
                        OOO0OOO0O00OOO0OO = True

                OOO0O0OOOO0OOOO00 = OOO0OOO0O00OOO0OO or O0OOO0O0O0000OO0O

    O00O0O0OO000O0O00 = []
    O0OO0OO0OOO0O0O0O = False
    O0O0O00OO0OO000O0 = False
    for O0OOO0O0O0000OO0O in OOOO000OO000OO00O:
        if O0O0O00OO0OO000O0 == False:
            if O0OO0OO0OOO0O0O0O == False:
                if O0OOO0O0O0000OO0O == O0O0O000OOO0OOOOO:
                    O00O0O0OO000O0O00.append(O0OOO0O0O0000OO0O)
                    O0OO0OO0OOO0O0O0O = True
            else:
                O00O0O0OO000O0O00.append(O0OOO0O0O0000OO0O)
            if O0OOO0O0O0000OO0O == OOO0O0OOOO0OOOO00:
                O00O0O0OO000O0O00.append(O0OOO0O0O0000OO0O)
                O0O0O00OO0OO000O0 = True

    OOOO000OO000OO00O = O00O0O0OO000O0O00
    return OOOO000OO000OO00O


def f24(O00O000O0OO00OO00):
    if O00O000O0OO00OO00.path != None:
        if O00O000O0OO00OO00.agent.moveTarget != O00O000O0OO00OO00.destination:
            if f14(O00O000O0OO00OO00):
                O00O000O0OO00OO00.path = []
                O00O000O0OO00OO00.agent.moveToTarget(O00O000O0OO00OO00.destination)
                return True
            if f11(O00O000O0OO00OO00):
                O00O0O0O0O0O0OOO0 = O00O000O0OO00OO00.path.pop(0)
                O00O000O0OO00OO00.agent.moveToTarget(O00O0O0O0O0O0OOO0)
                return True
    return False


def f11(O00O0OOOOOO00O000):
    if O00O0OOOOOO00O000.path != None:
        if len(O00O0OOOOOO00O000.path) > 0:
            O0OO00OOOO00O00OO = O00O0OOOOOO00O000.path[0]
            OOO00OOO000O0000O = f13(O00O0OOOOOO00O000.agent.rect.center, O0OO00OOOO00O00OO, O00O0OOOOOO00O000.world.getLines())
            if OOO00OOO000O0000O == None:
                OO000O00O0OO0OO00 = False
                for O0OO00O00O0000O0O in O00O0OOOOOO00O000.world.getPoints():
                    if f12((O00O0OOOOOO00O000.agent.rect.center, O0OO00OOOO00O00OO), O0OO00O00O0000O0O) < O00O0OOOOOO00O000.agent.getRadius() * 2.0:
                        OO000O00O0OO0OO00 = True

                if OO000O00O0OO0OO00:
                    return False
                return True
    return False
# okay decompiling astarnavigator2.pyc
